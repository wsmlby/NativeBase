{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","variable","borderRadiusLarge","defaultProps","style","getInitialStyle","variables","context","theme","children","Platform","OS","React","Children","map","child","type","Text","cloneElement","uppercase","androidRipple","prepareRootProps","_root","c","activeOpacity","onPress","androidRippleColor","TouchableNativeFeedback","Ripple","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport variable from \"./../theme/variables/platform\";\nimport { Text } from \"./Text\";\nimport computeProps from \"../Utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Button extends Component {\n\n\tstatic contextTypes = {\n\t\ttheme: PropTypes.object,\n\t};\n\n\tgetInitialStyle() {\n\t\treturn {\n\t\t\tborderedBtn: {\n\t\t\t\tborderWidth: this.props.bordered ? 1 : undefined,\n\t\t\t\tborderRadius: this.props.rounded && this.props.bordered ? variable.borderRadiusLarge : 2,\n\t\t\t},\n\t\t};\n\t}\n\n\t_root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\n\n\tprepareRootProps() {\n\t\tconst defaultProps = {\n\t\t\tstyle: this.getInitialStyle().borderedBtn,\n\t\t};\n\n\t\treturn computeProps(this.props, defaultProps);\n\t}\n\trender() {\n\t\tconst variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : variable;\n\t\tconst children =\n\t\t\tPlatform.OS === \"ios\"\n\t\t\t\t? this.props.children\n\t\t\t\t: React.Children.map(\n\t\t\t\t\t\tthis.props.children,\n\t\t\t\t\t\tchild =>\n\t\t\t\t\t\t\tchild && child.type === Text\n\t\t\t\t\t\t\t\t? React.cloneElement(child, { uppercase: true, ...child.props })\n\t\t\t\t\t\t\t\t: child\n\t\t\t\t\t);\n\t\tif (Platform.OS === \"ios\" || variables.androidRipple === false || Platform[\"Version\"] <= 21) {\n\t\t\treturn (\n\t\t\t\t<TouchableOpacity\n\t\t\t\t\t{...this.prepareRootProps()}\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tactiveOpacity={this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</TouchableOpacity>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<TouchableNativeFeedback\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tonPress={this.props.onPress}\n\t\t\t\t\tbackground={\n\t\t\t\t\t\tthis.props.androidRippleColor\n\t\t\t\t\t\t\t? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n\t\t\t\t\t\t\t: TouchableNativeFeedback.Ripple(variables.androidRippleColor)\n\t\t\t\t\t}\n\t\t\t\t\t{...this.prepareRootProps()}\n\t\t\t\t>\n\t\t\t\t\t<View {...this.prepareRootProps()}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</View>\n\t\t\t\t</TouchableNativeFeedback>\n\t\t\t);\n\t\t}\n\t}\n}\n\nButton.propTypes = {\n\t...TouchableOpacity.propTypes,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n\tblock: PropTypes.bool,\n\tprimary: PropTypes.bool,\n\ttransparent: PropTypes.bool,\n\tsuccess: PropTypes.bool,\n\tdanger: PropTypes.bool,\n\twarning: PropTypes.bool,\n\tinfo: PropTypes.bool,\n\tbordered: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\trounded: PropTypes.bool,\n\tlarge: PropTypes.bool,\n\tsmall: PropTypes.bool,\n\tactive: PropTypes.bool,\n};\n\nconst StyledButton = connectStyle(\"NativeBase.Button\", {}, mapPropsToStyleNames)(Button);\nexport { StyledButton as Button };\n"]}